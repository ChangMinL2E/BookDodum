{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// 현재 좌표를 기준으로 지역코드 불러오기\nexport async function getRegionCodeAPI(longitude, latitude) {\n  try {\n    const data = await axios({\n      method: \"GET\",\n      url: `${API_URL}/api/regioncode?longitude=${longitude}&latitude=${latitude}`\n    });\n\n    // 지역 이름 - string\n    const region = data.data.documents[0].address[\"region_1depth_name\"];\n    return {\n      regionName: region,\n      regionCode: regions[region]\n    };\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 도서 소장 도서관 정보 불러오기\nexport async function getLibraryAPI(ISBN, REGION_CODE) {\n  try {\n    const {\n      data\n    } = await axios({\n      method: \"GET\",\n      url: `${API_URL}/api/library?isbn=${ISBN}&regioncode=${REGION_CODE}`\n    });\n    return data.response.libs;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 도서관별 장서/대출 데이터 조회\nexport async function getItemSrchAPI(ISBN, LIB_CODE) {\n  try {\n    const {\n      data\n    } = await axios({\n      method: \"GET\",\n      url: `${API_URL}/api/itemsrch?isbn=${ISBN}&libcode=${LIB_CODE}`\n    });\n    return data.response.docs[0].doc;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 도서관별 도서 소장여부 및 대출 가능여부 조회\nexport async function getBookExistAPI(ISBN, LIB_CODE) {\n  try {\n    const {\n      data\n    } = await axios({\n      method: \"GET\",\n      url: `${API_URL}/api/bookexist?isbn=${ISBN}&libcode=${LIB_CODE}`\n    });\n    return data.response.result.loanAvailable;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 베스트 키워드 조회\n// 이달의 키워드 조회\nexport async function getBestKeywordAPI(YEAR, MONTH) {\n  try {\n    const {\n      data\n    } = await axios({\n      method: \"GET\",\n      url: `${API_URL}/api/bestkeyword?year=${YEAR}&month=${MONTH}`\n    });\n    return data.response.keywords;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 내 지역 도서관 인기 대출 도서 목록 조회\nexport async function getLibraryBooksAPI(REGION_CODE) {\n  let tmp = [];\n  let title = [];\n  try {\n    const data = await axios({\n      method: \"GET\",\n      url: `${API_URL}/api/librarybooks?regioncode=${REGION_CODE}`\n    });\n    for (let book of data.data.response.docs) {\n      if (!title.includes(book.doc.bookname)) {\n        tmp.push(book.doc);\n        title.push(book.doc.bookname);\n      }\n      if (tmp.length === 10) break;\n    }\n    return tmp;\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getRegionCodeAPI","longitude","latitude","data","method","url","region","documents","address","regionName","regionCode","regions","e","console","log","getLibraryAPI","ISBN","REGION_CODE","response","libs","getItemSrchAPI","LIB_CODE","docs","doc","getBookExistAPI","result","loanAvailable","getBestKeywordAPI","YEAR","MONTH","keywords","getLibraryBooksAPI","tmp","title","book","includes","bookname","push","length"],"sources":["C:/Users/multicampus/Desktop/S08P22C104/frontend/src/apis/library.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// 현재 좌표를 기준으로 지역코드 불러오기\r\nexport async function getRegionCodeAPI(longitude: number, latitude: number) {\r\n  try {\r\n    const data = await axios({\r\n      method: \"GET\",\r\n      url: `${API_URL}/api/regioncode?longitude=${longitude}&latitude=${latitude}`,\r\n    });\r\n\r\n    // 지역 이름 - string\r\n    const region: string = data.data.documents[0].address[\"region_1depth_name\"];\r\n\r\n    return { regionName: region, regionCode: regions[region] };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n\r\n\r\n// 도서 소장 도서관 정보 불러오기\r\nexport async function getLibraryAPI(ISBN: any, REGION_CODE: number) {\r\n  try {\r\n    const { data } = await axios({\r\n      method: \"GET\",\r\n      url: `${API_URL}/api/library?isbn=${ISBN}&regioncode=${REGION_CODE}`,\r\n    });\r\n    return data.response.libs;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// 도서관별 장서/대출 데이터 조회\r\nexport async function getItemSrchAPI(ISBN: any, LIB_CODE: number) {\r\n  try {\r\n    const { data } = await axios({\r\n      method: \"GET\",\r\n      url: `${API_URL}/api/itemsrch?isbn=${ISBN}&libcode=${LIB_CODE}`,\r\n    });\r\n    return data.response.docs[0].doc;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// 도서관별 도서 소장여부 및 대출 가능여부 조회\r\nexport async function getBookExistAPI(ISBN: any, LIB_CODE: number) {\r\n  try {\r\n    const { data } = await axios({\r\n      method: \"GET\",\r\n      url: `${API_URL}/api/bookexist?isbn=${ISBN}&libcode=${LIB_CODE}`,\r\n    });\r\n    return data.response.result.loanAvailable;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// 베스트 키워드 조회\r\n// 이달의 키워드 조회\r\nexport async function getBestKeywordAPI(YEAR: string, MONTH: string) {\r\n  try {\r\n    const { data } = await axios({\r\n      method: \"GET\",\r\n      url: `${API_URL}/api/bestkeyword?year=${YEAR}&month=${MONTH}`,\r\n    });\r\n    return data.response.keywords;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n\r\n// 내 지역 도서관 인기 대출 도서 목록 조회\r\nexport async function getLibraryBooksAPI(REGION_CODE: number) {\r\n  let tmp: any = [];\r\n  let title: string[] = [];\r\n  try {\r\n    const data = await axios({\r\n      method: \"GET\",\r\n      url: `${API_URL}/api/librarybooks?regioncode=${REGION_CODE}`,\r\n    });\r\n\r\n    for (let book of data.data.response.docs) {\r\n      if (!title.includes(book.doc.bookname)) {\r\n        tmp.push(book.doc);\r\n        title.push(book.doc.bookname);\r\n      }\r\n\r\n      if (tmp.length === 10) break;\r\n    }\r\n\r\n    return tmp;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}