{"ast":null,"code":"import axios from \"axios\";\nconst regions = {\n  서울: 11,\n  부산: 21,\n  대구: 22,\n  인천: 23,\n  광주: 24,\n  대전: 25,\n  울산: 26,\n  세종: 29,\n  경기: 31,\n  강원: 32,\n  충북: 33,\n  충남: 34,\n  전북: 35,\n  전남: 36,\n  경북: 37,\n  경남: 38,\n  제주: 39\n};\nconst KAKAO_REST_API_KEY = process.env.REACT_APP_KAKAO_REST_API_KEY;\nconst LIBRARY_API_URL = process.env.REACT_APP_LIBRARY_API_URL;\nconst LIBRARY_API_KEY = process.env.REACT_APP_LIBRARY_API_KEY;\n\n// 현재 좌표를 기준으로 지역코드 불러오기\nexport async function getRegionCodeAPI(longitude, latitude) {\n  console.log();\n  try {\n    const data = await axios({\n      method: \"GET\",\n      url: `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}&input_coord=WGS84`,\n      headers: {\n        Authorization: `KakaoAK ${KAKAO_REST_API_KEY}`\n      }\n    });\n\n    // 지역 이름 - string\n    const region = data.data.documents[0].address[\"region_1depth_name\"];\n    return {\n      regionName: region,\n      regionCode: regions[region]\n    };\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 내 지역 도서관 인기 대출 도서 목록 조회\nexport async function getLibraryBooksAPI(REGION_CODE) {\n  let tmp = [];\n  let title = [];\n  try {\n    const data = await axios({\n      method: \"GET\",\n      url: `${LIBRARY_API_URL}/loanItemSrchByLib?authKey=${LIBRARY_API_KEY}&region=${REGION_CODE}&format=json`\n    });\n    for (let book of data.data.response.docs) {\n      if (!title.includes(book.doc.bookname)) {\n        tmp.push(book.doc);\n        title.push(book.doc.bookname);\n      }\n      if (tmp.length === 10) break;\n    }\n    return tmp;\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"names":["axios","regions","서울","부산","대구","인천","광주","대전","울산","세종","경기","강원","충북","충남","전북","전남","경북","경남","제주","KAKAO_REST_API_KEY","process","env","REACT_APP_KAKAO_REST_API_KEY","LIBRARY_API_URL","REACT_APP_LIBRARY_API_URL","LIBRARY_API_KEY","REACT_APP_LIBRARY_API_KEY","getRegionCodeAPI","longitude","latitude","console","log","data","method","url","headers","Authorization","region","documents","address","regionName","regionCode","e","getLibraryBooksAPI","REGION_CODE","tmp","title","book","response","docs","includes","doc","bookname","push","length"],"sources":["C:/Users/multicampus/Desktop/S08P22C104/frontend/src/apis/region.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { off } from \"process\";\r\n\r\nconst regions: { [key: string]: number } = {\r\n  서울: 11,\r\n  부산: 21,\r\n  대구: 22,\r\n  인천: 23,\r\n  광주: 24,\r\n  대전: 25,\r\n  울산: 26,\r\n  세종: 29,\r\n  경기: 31,\r\n  강원: 32,\r\n  충북: 33,\r\n  충남: 34,\r\n  전북: 35,\r\n  전남: 36,\r\n  경북: 37,\r\n  경남: 38,\r\n  제주: 39,\r\n};\r\n\r\nconst KAKAO_REST_API_KEY = process.env.REACT_APP_KAKAO_REST_API_KEY;\r\nconst LIBRARY_API_URL = process.env.REACT_APP_LIBRARY_API_URL;\r\nconst LIBRARY_API_KEY = process.env.REACT_APP_LIBRARY_API_KEY;\r\n\r\n// 현재 좌표를 기준으로 지역코드 불러오기\r\nexport async function getRegionCodeAPI(longitude: number, latitude: number) {\r\n  console.log()\r\n  try {\r\n    const data = await axios({\r\n      method: \"GET\",\r\n      url: `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}&input_coord=WGS84`,\r\n      headers: {\r\n        Authorization: `KakaoAK ${KAKAO_REST_API_KEY}`,\r\n      },\r\n    });\r\n\r\n    // 지역 이름 - string\r\n    const region: string = data.data.documents[0].address[\"region_1depth_name\"];\r\n\r\n    return { regionName: region, regionCode: regions[region] };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// 내 지역 도서관 인기 대출 도서 목록 조회\r\nexport async function getLibraryBooksAPI(REGION_CODE: number) {\r\n  let tmp: any = [];\r\n  let title: string[] = [];\r\n  try {\r\n    const data = await axios({\r\n      method: \"GET\",\r\n      url: `${LIBRARY_API_URL}/loanItemSrchByLib?authKey=${LIBRARY_API_KEY}&region=${REGION_CODE}&format=json`,\r\n    });\r\n\r\n    for (let book of data.data.response.docs) {\r\n      if (!title.includes(book.doc.bookname)) {\r\n        tmp.push(book.doc);\r\n        title.push(book.doc.bookname);\r\n      }\r\n\r\n      if (tmp.length === 10) break;\r\n    }\r\n\r\n    return tmp;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAkC,GAAG;EACzCC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE;AACN,CAAC;AAED,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B;AACnE,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,yBAAyB;AAC7D,MAAMC,eAAe,GAAGL,OAAO,CAACC,GAAG,CAACK,yBAAyB;;AAE7D;AACA,OAAO,eAAeC,gBAAgBA,CAACC,SAAiB,EAAEC,QAAgB,EAAE;EAC1EC,OAAO,CAACC,GAAG,EAAE;EACb,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMhC,KAAK,CAAC;MACvBiC,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,4DAA2DN,SAAU,MAAKC,QAAS,oBAAmB;MAC5GM,OAAO,EAAE;QACPC,aAAa,EAAG,WAAUjB,kBAAmB;MAC/C;IACF,CAAC,CAAC;;IAEF;IACA,MAAMkB,MAAc,GAAGL,IAAI,CAACA,IAAI,CAACM,SAAS,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,oBAAoB,CAAC;IAE3E,OAAO;MAAEC,UAAU,EAAEH,MAAM;MAAEI,UAAU,EAAExC,OAAO,CAACoC,MAAM;IAAE,CAAC;EAC5D,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVZ,OAAO,CAACC,GAAG,CAACW,CAAC,CAAC;EAChB;AACF;;AAEA;AACA,OAAO,eAAeC,kBAAkBA,CAACC,WAAmB,EAAE;EAC5D,IAAIC,GAAQ,GAAG,EAAE;EACjB,IAAIC,KAAe,GAAG,EAAE;EACxB,IAAI;IACF,MAAMd,IAAI,GAAG,MAAMhC,KAAK,CAAC;MACvBiC,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,GAAEX,eAAgB,8BAA6BE,eAAgB,WAAUmB,WAAY;IAC7F,CAAC,CAAC;IAEF,KAAK,IAAIG,IAAI,IAAIf,IAAI,CAACA,IAAI,CAACgB,QAAQ,CAACC,IAAI,EAAE;MACxC,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAAC,EAAE;QACtCP,GAAG,CAACQ,IAAI,CAACN,IAAI,CAACI,GAAG,CAAC;QAClBL,KAAK,CAACO,IAAI,CAACN,IAAI,CAACI,GAAG,CAACC,QAAQ,CAAC;MAC/B;MAEA,IAAIP,GAAG,CAACS,MAAM,KAAK,EAAE,EAAE;IACzB;IAEA,OAAOT,GAAG;EACZ,CAAC,CAAC,OAAOH,CAAC,EAAE;IACVZ,OAAO,CAACC,GAAG,CAACW,CAAC,CAAC;EAChB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}