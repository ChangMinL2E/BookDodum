{"ast":null,"code":"import axios from \"axios\";\nimport { getGeoLocationAPI } from \"./geolocation\";\nconst regions = {\n  '서울': 11,\n  '부산': 21,\n  '대구': 22,\n  '인천': 23,\n  '광주': 24,\n  '대전': 25,\n  '울산': 26,\n  '세종': 29,\n  '경기': 31,\n  '강원': 32,\n  '충북': 33,\n  '충남': 34,\n  '전북': 35,\n  '전남': 36,\n  '경북': 37,\n  '경남': 38,\n  '제주': 39\n};\nconst KAKAO_REST_API_KEY = process.env.REACT_APP_KAKAO_REST_API_KEY;\nconst LIBRARY_API_URL = process.env.REACT_APP_LIBRARY_API_URL;\nconst LIBRARY_API_KEY = process.env.REACT_APP_LIBRARY_API_KEY;\n\n// 현재 좌표를 기준으로 지역코드 불러오기\nexport async function getRegionCodeAPI() {\n  try {\n    const [latitude, longitude] = await getGeoLocationAPI();\n    const data = await axios({\n      method: \"GET\",\n      url: `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}&input_coord=WGS84`,\n      headers: {\n        'Authorization': `KakaoAK ${KAKAO_REST_API_KEY}`\n      }\n    });\n\n    // 지역 이름 - string\n    const region = data.data.documents[0].address['region_1depth_name'];\n    console.log(regions[region]);\n    return regions[region];\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// 내 지역 도서관 인기 대출 도서 목록 조회\nexport async function getLibraryBooksAPI() {\n  let tmp = [];\n  let title = [];\n  try {\n    // const REGION_CODE = await getRegionCodeAPI(longitude, latitude)\n\n    const data = await axios({\n      method: \"GET\",\n      url: `${LIBRARY_API_URL}/loanItemSrchByLib?authKey=${LIBRARY_API_KEY}&region=${24}&format=json`\n    });\n    for (let book of data.data.response.docs) {\n      if (!title.includes(book.doc.bookname)) {\n        tmp.push(book.doc);\n        title.push(book.doc.bookname);\n      }\n      if (tmp.length === 10) break;\n    }\n    return tmp;\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"names":["axios","getGeoLocationAPI","regions","KAKAO_REST_API_KEY","process","env","REACT_APP_KAKAO_REST_API_KEY","LIBRARY_API_URL","REACT_APP_LIBRARY_API_URL","LIBRARY_API_KEY","REACT_APP_LIBRARY_API_KEY","getRegionCodeAPI","latitude","longitude","data","method","url","headers","region","documents","address","console","log","e","getLibraryBooksAPI","tmp","title","book","response","docs","includes","doc","bookname","push","length"],"sources":["C:/Users/multicampus/Desktop/S08P22C104/frontend/src/apis/region.ts"],"sourcesContent":["\r\nimport axios from \"axios\";\r\nimport { off } from \"process\";\r\nimport { getGeoLocationAPI } from \"./geolocation\";\r\n\r\nconst regions: {[key:string]:number} = {\r\n    '서울' : 11,\r\n    '부산' : 21,\r\n    '대구' : 22,\r\n    '인천' : 23,\r\n    '광주' : 24,\r\n    '대전' : 25,\r\n    '울산' : 26,\r\n    '세종' : 29,\r\n    '경기' : 31,\r\n    '강원' : 32,\r\n    '충북' : 33,\r\n    '충남' : 34,\r\n    '전북' : 35,\r\n    '전남' : 36,\r\n    '경북' : 37,\r\n    '경남' : 38,\r\n    '제주' : 39\r\n}\r\n\r\nconst KAKAO_REST_API_KEY = process.env.REACT_APP_KAKAO_REST_API_KEY\r\nconst LIBRARY_API_URL = process.env.REACT_APP_LIBRARY_API_URL\r\nconst LIBRARY_API_KEY = process.env.REACT_APP_LIBRARY_API_KEY\r\n\r\n// 현재 좌표를 기준으로 지역코드 불러오기\r\nexport async function getRegionCodeAPI() {\r\n  try {\r\n    const [latitude, longitude] = await getGeoLocationAPI();\r\n\r\n    const data  = await axios({\r\n      method: \"GET\",\r\n      url: `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}&input_coord=WGS84`,\r\n      headers: {\r\n        'Authorization': `KakaoAK ${KAKAO_REST_API_KEY}`,\r\n      }\r\n    });\r\n\r\n    // 지역 이름 - string\r\n    const region:string = data.data.documents[0].address['region_1depth_name']\r\n    console.log(regions[region])\r\n    return regions[region];\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n// 내 지역 도서관 인기 대출 도서 목록 조회\r\nexport async function getLibraryBooksAPI() {\r\n  let tmp:any = []  \r\n  let title : string[] = []\r\n  try {\r\n      // const REGION_CODE = await getRegionCodeAPI(longitude, latitude)\r\n\r\n      const data  = await axios({\r\n        method: \"GET\",\r\n        url: `${LIBRARY_API_URL}/loanItemSrchByLib?authKey=${LIBRARY_API_KEY}&region=${24}&format=json`,\r\n      });\r\n\r\n      for(let book of data.data.response.docs) {\r\n        if(!title.includes(book.doc.bookname)) {\r\n          tmp.push(book.doc)\r\n          title.push(book.doc.bookname)\r\n        }\r\n\r\n        if(tmp.length === 10) break\r\n      }\r\n\r\n      return tmp;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,iBAAiB,QAAQ,eAAe;AAEjD,MAAMC,OAA8B,GAAG;EACnC,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG,EAAE;EACT,IAAI,EAAG;AACX,CAAC;AAED,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B;AACnE,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,yBAAyB;AAC7D,MAAMC,eAAe,GAAGL,OAAO,CAACC,GAAG,CAACK,yBAAyB;;AAE7D;AACA,OAAO,eAAeC,gBAAgBA,CAAA,EAAG;EACvC,IAAI;IACF,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAG,MAAMZ,iBAAiB,EAAE;IAEvD,MAAMa,IAAI,GAAI,MAAMd,KAAK,CAAC;MACxBe,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,4DAA2DH,SAAU,MAAKD,QAAS,oBAAmB;MAC5GK,OAAO,EAAE;QACP,eAAe,EAAG,WAAUd,kBAAmB;MACjD;IACF,CAAC,CAAC;;IAEF;IACA,MAAMe,MAAa,GAAGJ,IAAI,CAACA,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,oBAAoB,CAAC;IAC1EC,OAAO,CAACC,GAAG,CAACpB,OAAO,CAACgB,MAAM,CAAC,CAAC;IAC5B,OAAOhB,OAAO,CAACgB,MAAM,CAAC;EACxB,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVF,OAAO,CAACC,GAAG,CAACC,CAAC,CAAC;EAChB;AACF;;AAEA;AACA,OAAO,eAAeC,kBAAkBA,CAAA,EAAG;EACzC,IAAIC,GAAO,GAAG,EAAE;EAChB,IAAIC,KAAgB,GAAG,EAAE;EACzB,IAAI;IACA;;IAEA,MAAMZ,IAAI,GAAI,MAAMd,KAAK,CAAC;MACxBe,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,GAAET,eAAgB,8BAA6BE,eAAgB,WAAU,EAAG;IACpF,CAAC,CAAC;IAEF,KAAI,IAAIkB,IAAI,IAAIb,IAAI,CAACA,IAAI,CAACc,QAAQ,CAACC,IAAI,EAAE;MACvC,IAAG,CAACH,KAAK,CAACI,QAAQ,CAACH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAAC,EAAE;QACrCP,GAAG,CAACQ,IAAI,CAACN,IAAI,CAACI,GAAG,CAAC;QAClBL,KAAK,CAACO,IAAI,CAACN,IAAI,CAACI,GAAG,CAACC,QAAQ,CAAC;MAC/B;MAEA,IAAGP,GAAG,CAACS,MAAM,KAAK,EAAE,EAAE;IACxB;IAEA,OAAOT,GAAG;EACZ,CAAC,CAAC,OAAOF,CAAC,EAAE;IACVF,OAAO,CAACC,GAAG,CAACC,CAAC,CAAC;EAChB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}